
#include <catch2/catch.hpp>

[[namespace=value_natsuki_node_test]];
[[visitable]];

class a(m_b: b);
class b(m_c: c);
class c;

public:
{
#include "value_natsuki_node_test_debug.h"
#include <sstream>

TEST_CASE("default node is nullptr", "[value_natsuki_node_test]")
{
    auto a_ = std::make_unique<a>();
    REQUIRE(a_->m_b == nullptr);
}

TEST_CASE("debug natsuki node", "[value_natsuki_node_test][debug]")
{
    std::stringstream os;
    value_natsuki_node_test_debug debug(os, 2);

    auto a_ = std::make_unique<a>();
    a_->m_b = new b;
    a_->m_b->m_c = new c;
    a_->traverse(debug);

    REQUIRE(a_->m_b != nullptr);
    REQUIRE(a_->m_b->m_c != nullptr);

    std::stringstream ss;
    ss << "A " << static_cast<void*>(a_.get()) << "\n";
    ss << "m_b:\n";
    ss << "  B " << a_->m_b << "\n";
    ss << "  m_c:\n";
    ss << "    C " << a_->m_b->m_c << "\n";

    REQUIRE(ss.str() == os.str());
}

TEST_CASE("debug 2 natsuki node", "[value_natsuki_node_test][debug]")
{
    std::stringstream os;
    value_natsuki_node_test_debug debug(os, 2);

    auto a_ = std::make_unique<a>();
    a_->traverse(debug);

    REQUIRE(a_->m_b == nullptr);

    std::stringstream ss;
    ss << "A " << static_cast<void*>(a_.get()) << "\n";
    ss << "m_b: nullptr\n";

    REQUIRE(ss.str() == os.str());
}

}
