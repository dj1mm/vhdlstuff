
#include <catch2/catch.hpp>
#include <string>
#include <optional>

#define string std::string
#define int int = 1234

[[namespace=optional_natsuki_node_test]];
[[visitable]];

class a(m_b?: b, m_c?: c);
class b;
class c(number: int, str: string);

public:
{
#include "optional_natsuki_node_test_debug.h"
#include <sstream>

TEST_CASE("optional node is nullptr", "[optional_natsuki_node_test]")
{
    auto a_ = std::make_unique<a>();
    REQUIRE(a_->m_b == nullptr);
    REQUIRE(a_->m_c == nullptr);

    // Require a_->__valid__()

    a_->m_b = new b;

    a_->m_c = new c;
    REQUIRE(a_->m_c->number == 1234);
    REQUIRE(a_->m_c->str == "");
}

TEST_CASE("debug optional natsuki node", "[optional_natsuki_node_test][debug]")
{
    std::stringstream os;
    optional_natsuki_node_test_debug debug(os, 2);

    auto a_ = std::make_unique<a>();
    a_->traverse(debug);

    std::stringstream ss;
    ss << "A " << static_cast<void*>(a_.get()) << "\n";
    ss << "m_b: nullptr\n";
    ss << "m_c: nullptr\n";

    REQUIRE(ss.str() == os.str());
}

TEST_CASE("debug 2 optional natsuki node", "[optional_natsuki_node_test][debug]")
{
    std::stringstream os;
    optional_natsuki_node_test_debug debug(os, 2);

    auto a_ = std::make_unique<a>();
    a_->m_b = new b;
    a_->traverse(debug);

    std::stringstream ss;
    ss << "A " << static_cast<void*>(a_.get()) << "\n";
    ss << "m_b:\n";
    ss << "  B " << a_->m_b << "\n";
    ss << "m_c: nullptr\n";

    REQUIRE(ss.str() == os.str());
}

TEST_CASE("debug 3 optional natsuki node", "[optional_natsuki_node_test][debug]")
{
    std::stringstream os;
    optional_natsuki_node_test_debug debug(os, 2);

    auto a_ = std::make_unique<a>();
    a_->m_c = new c;
    a_->traverse(debug);

    std::stringstream ss;
    ss << "A " << static_cast<void*>(a_.get()) << "\n";
    ss << "m_b: nullptr\n";
    ss << "m_c:\n";
    ss << "  C " << a_->m_c << " number: 1234 str: \n";

    REQUIRE(ss.str() == os.str());
}

}
