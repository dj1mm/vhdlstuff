
#include <catch2/catch.hpp>
#include <vector>

#define number int = 1

[[namespace=array_custom_obj_test]];
[[visitable]];

class b(num: number[]);

public:
{
#include "array_custom_obj_test_debug.h"
#include <sstream>

TEST_CASE("array optional custom objects", "[array_custom_obj_test]")
{
    auto b_ = std::make_unique<b>();
    REQUIRE(b_->num.size() == 0);
}

TEST_CASE("debug 1 array objs", "[array_custom_obj_test][debug]")
{
    std::stringstream os;
    array_custom_obj_test_debug debug(os, 2);

    auto b_ = std::make_unique<b>();
    b_->traverse(debug);

    std::stringstream ss;
    ss << "B " << static_cast<void*>(b_.get()) << "\n";
    ss << "num: []\n";

    REQUIRE(ss.str() == os.str());
}

TEST_CASE("debug 2 array objs", "[array_custom_obj_test][debug]")
{
    std::stringstream os;
    array_custom_obj_test_debug debug(os, 2);

    auto b_ = std::make_unique<b>();
    b_->num.push_back(4);
    b_->num.push_back(40);
    b_->num.push_back(400);
    b_->num.push_back(4000);
    b_->num.push_back(40000);
    b_->num.push_back(400000);
    b_->num.push_back(4000000);
    b_->num.push_back(40000000);
    b_->traverse(debug);

    std::stringstream ss;
    ss << "B " << static_cast<void*>(b_.get()) << "\n";
    ss << "num: [4, 40, 400, 4000, 40000, 400000, 4000000, 40000000]\n";

    REQUIRE(ss.str() == os.str());
}

}
